name: 'Deploy demo'

on:
  push:
    branches: [main]


defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: demo
    steps:
      - name: Prepare keys 
        run: |
          mkdir -p ~/.ssh
          echo -e "$KEY" > ~/.ssh/id_rsa
          chmod og-rwx ~/.ssh/id_rsa
          ssh-keyscan $HOST >> ~/.ssh/known_hosts
        env:
          HOST: ${{ secrets.REMOTE_HOST }}
          KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Deploy
        run: ssh $USER@$HOST $COMMAND && ssh $USER@$HOST $RESTART
        env: 
         HOST: ${{ secrets.REMOTE_HOST }}
         USER: ${{ secrets.REMOTE_USER }}
         COMMAND: >
           sudo -u node /home/node/app/postdeploy.sh 
         RESTART: >
           sudo systemctl restart app.service
  api-build:
    name: Build api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Prepare Docker tag
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: betagouvpdc/observatoire-api
          tag-latest: false
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build api image for test
        id: docker_test
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./api
          file: ./docker/api/Dockerfile
          load: true
          push: false
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: betagouvpdc/observatoire-api:${{ steps.docker_meta.outputs.version }}
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./docker/api/prod/Dockerfile
          push: true
          pull: false
          tags: ${{ steps.docker_meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - run: echo ${{ steps.docker_build.outputs.digest }} > api.digest && cat api.digest
      - name: Upload Image digest
        uses: actions/upload-artifact@v2
        with:
          name: api.digest
          path: api.digest
  frontend-build:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Prepare Docker tag
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: betagouvpdc/observatoire-frontend
          tag-latest: false
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build frontend image for test
        id: docker_test
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./docker/frontend/Dockerfile
          load: true
          push: false
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: betagouvpdc/observatoire-frontend:${{ steps.docker_meta.outputs.version }}
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./docker/frontend/Dockerfile
          push: true
          pull: false
          tags: ${{ steps.docker_meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - run: echo ${{ steps.docker_build.outputs.digest }} > frontend.digest && cat frontend.digest
      - name: Upload Image digest
        uses: actions/upload-artifact@v2
        with:
          name: frontend.digest
          path: frontend.digest
  etl-build:
    name: Build etl
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Prepare Docker tag
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: betagouvpdc/observatoire-etl
          tag-latest: false
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build etl image for test
        id: docker_test
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./etl
          file: ./docker/etl/Dockerfile
          load: true
          push: false
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: betagouvpdc/observatoire-etl:${{ steps.docker_meta.outputs.version }}
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./etl
          file: ./docker/etl/Dockerfile
          push: true
          pull: false
          tags: ${{ steps.docker_meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - run: echo ${{ steps.docker_build.outputs.digest }} > etl.digest && cat etl.digest
      - name: Upload Image digest
        uses: actions/upload-artifact@v2
        with:
          name: etl.digest
          path: etl.digest